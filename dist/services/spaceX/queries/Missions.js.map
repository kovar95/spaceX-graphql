{"version":3,"file":"Missions.js","sourceRoot":"/","sources":["services/spaceX/queries/Missions.ts"],"names":[],"mappings":";;;;;AAAA,qCAAqE;AACrE,gEAAwC;AAGxC,iFAAyD;AACzD,iEAAgD;AAEhD,iDAKuB;AAEvB,kBAAe;IACb,IAAI,EAAE,IAAI,qBAAW,CAAC,IAAI,wBAAc,CAAC,iBAAc,CAAC,CAAC;IACzD,IAAI,EAAE;QACJ,QAAQ,EAAE;YACR,IAAI,EAAE,IAAI,wBAAc,CAAC,uBAAa,CAAC;SACxC;QACD,GAAG,8BAAc;KAClB;IACD,OAAO,EAAE,KAAK,EACZ,CAAU,EACV,EAAE,QAAQ,EAAE,GAAG,cAAc,EAA8C,EAC3E,EAAE,WAAW,EAAsB,EACf,EAAE;QACtB,MAAM,WAAW,GAAG,MAAM,WAAW,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC;QAC9D,MAAM,IAAI,GAAG,MAAM,cAAI,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC;QACpD,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAClB,MAAM,QAAQ,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,OAAmB,EAAE,EAAE,CACvD,IAAA,uBAAa,EACX,OAAO,EACP,IAAI,EAAE,iBAAiB,EAAE,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,KAAK,CACvD,CACF,CAAC;QACF,MAAM,IAAI,GAAG,IAAA,mCAAmB,EAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;QAC3D,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;QACjB,OAAO,QAAQ,CAAC;IAClB,CAAC;CACF,CAAC","sourcesContent":["import { GraphQLList, GraphQLNonNull, GraphQLString } from \"graphql\";\nimport User from \"../../../models/user\";\nimport { GraphqlContextType } from \"../../DataSources\";\nimport { ApiMission } from \"../apiTypes/ApiMission\";\nimport createMission from \"../dataLoaders/createMission\";\nimport GraphQLMission from \"../outputs/Mission\";\nimport { Mission } from \"../types/Mission\";\nimport {\n  connectionFromArray,\n  connectionArgs,\n  ConnectionArguments,\n  Connection,\n} from 'graphql-relay';\n\nexport default {\n  type: new GraphQLList(new GraphQLNonNull(GraphQLMission)),\n  args: {\n    userName: {\n      type: new GraphQLNonNull(GraphQLString),\n    },\n    ...connectionArgs,\n  },\n  resolve: async (\n    _: unknown,\n    { userName, ...connectionArgs }: { userName: string } & ConnectionArguments,\n    { dataSources }: GraphqlContextType\n  ): Promise<Mission[]> => {\n    const allMissions = await dataSources.spaceX.getAllLaunches();\n    const user = await User.findOne({ name: userName });\n    console.log(user);\n    const missions = allMissions.map((mission: ApiMission) =>\n      createMission(\n        mission,\n        user?.favouriteMissions?.includes(mission.id) ?? false\n      )\n    );\n    const test = connectionFromArray(missions, connectionArgs);\n    console.log(test)\n    return missions;\n  },\n};\n"]}