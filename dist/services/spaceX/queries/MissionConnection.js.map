{"version":3,"file":"MissionConnection.js","sourceRoot":"/","sources":["services/spaceX/queries/MissionConnection.ts"],"names":[],"mappings":";;;;;AAAA,qCAAoE;AACpE,gEAAwC;AAGxC,iFAAyD;AACzD,iEAAgD;AAEhD,iDAMuB;AACvB,2EAA+E;AAE/E,MAAM,cAAc,GAAG,CAAC,CAAC;AACzB,MAAM,aAAa,GAAG,EAAE,CAAC;AAEzB,MAAM,EAAE,cAAc,EAAE,wBAAwB,EAAE,GAAG,IAAA,qCAAqB,EAAC;IACzE,QAAQ,EAAE,iBAAc;IACxB,gBAAgB,EAAE;QAChB,UAAU,EAAE;YACV,IAAI,EAAE,oBAAU;YAChB,WAAW,EAAE,iBAAiB;YAC9B,OAAO,EAAE,CAAC,UAAU,EAAE,EAAE;gBACtB,OAAO,UAAU,CAAC,UAAU,CAAC;YAC/B,CAAC;SACF;KACF;CACF,CAAC,CAAC;AAEH,kBAAe;IACb,IAAI,EAAE,wBAAwB;IAC9B,IAAI,EAAE;QACJ,QAAQ,EAAE;YACR,IAAI,EAAE,IAAI,wBAAc,CAAC,uBAAa,CAAC;SACxC;QACD,GAAG,8BAAc;KAClB;IACD,OAAO,EAAE,KAAK,EACZ,CAAU,EACV,EAAE,QAAQ,EAAE,GAAG,cAAc,EAA8C,EAC3E,EAAE,WAAW,EAAsB,EACL,EAAE;QAChC,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,cAAc,CAAC;QACxC,MAAM,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,IAAA,4BAAY,EAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC;QACvE,MAAM,KAAK,GAAG,KAAK,IAAI,aAAa,CAAC;QAErC,MAAM,WAAW,GAAG,MAAM,WAAW,CAAC,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAC3E,MAAM,IAAI,GAAG,MAAM,cAAI,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC;QACpD,MAAM,QAAQ,GAAG,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,OAAmB,EAAE,EAAE,CAC5D,IAAA,uBAAa,EACX,OAAO,EACP,IAAI,EAAE,iBAAiB,EAAE,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,KAAK,CACvD,CACF,CAAC;QAEF,MAAM,oBAAoB,GAAG,WAAW,CAAC,aAAa,CAAC;QAEvD,MAAM,kBAAkB,GAAG,IAAA,gDAA0B,EACnD,QAAQ,EACR,WAAW,CAAC,WAAW,EACvB,WAAW,CAAC,WAAW,EACvB,oBAAoB,CACrB,CAAC;QAEF,OAAO,kBAAkB,CAAC;IAC5B,CAAC;CACF,CAAC","sourcesContent":["import { GraphQLInt, GraphQLNonNull, GraphQLString } from \"graphql\";\nimport User from \"../../../models/user\";\nimport { GraphqlContextType } from \"../../DataSources\";\nimport { ApiMission } from \"../apiTypes/ApiMission\";\nimport createMission from \"../dataLoaders/createMission\";\nimport GraphQLMission from \"../outputs/Mission\";\nimport { Mission } from \"../types/Mission\";\nimport {\n  connectionArgs,\n  ConnectionArguments,\n  Connection,\n  connectionDefinitions,\n  fromGlobalId,\n} from \"graphql-relay\";\nimport { connectionFromPageCursored } from \"../../../node/ConnectionSanitizer\";\n\nconst DEFAULT_OFFSET = 0;\nconst DEFAULT_LIMIT = 20;\n\nconst { connectionType: GraphQLMissionConnection } = connectionDefinitions({\n  nodeType: GraphQLMission,\n  connectionFields: {\n    pageNumber: {\n      type: GraphQLInt,\n      description: \"Number of page.\",\n      resolve: (connection) => {\n        return connection.pageNumber;\n      },\n    },\n  },\n});\n\nexport default {\n  type: GraphQLMissionConnection,\n  args: {\n    userName: {\n      type: new GraphQLNonNull(GraphQLString),\n    },\n    ...connectionArgs,\n  },\n  resolve: async (\n    _: unknown,\n    { userName, ...connectionArgs }: { userName: string } & ConnectionArguments,\n    { dataSources }: GraphqlContextType\n  ): Promise<Connection<Mission>> => {\n    const { first, after } = connectionArgs;\n    const offset = after ? Number(fromGlobalId(after).id) : DEFAULT_OFFSET;\n    const limit = first ?? DEFAULT_LIMIT;\n\n    const allMissions = await dataSources.spaceX.getAllLaunches(offset, limit);\n    const user = await User.findOne({ name: userName });\n    const missions = allMissions.docs.map((mission: ApiMission) =>\n      createMission(\n        mission,\n        user?.favouriteMissions?.includes(mission.id) ?? false\n      )\n    );\n\n    const startingCursorNumber = allMissions.pagingCounter;\n\n    const connectionCursored = connectionFromPageCursored(\n      missions,\n      allMissions.hasNextPage,\n      allMissions.hasPrevPage,\n      startingCursorNumber\n    );\n\n    return connectionCursored;\n  },\n};\n"]}