{"version":3,"file":"Node.js","sourceRoot":"/","sources":["node/Node.ts"],"names":[],"mappings":";;;AAAA,iDAAgD;AAChD,iDAA6C;AAI7C,MAAM,SAAS,GAAG,CAAC,kBAAkB,EAAE,iBAAiB,EAAE,SAAS,CAAC,CAAC;AAE9D,MAAM,SAAS,GAAG,KAAK,EAC5B,EAAU,EACV,EAAE,WAAW,EAAsB,EACjB,EAAE;IACpB,OAAO;QACL,EAAE;KACH,CAAC;AACJ,CAAC,CAAC;AAPW,QAAA,SAAS,aAOpB;AAEK,MAAM,YAAY,GAAG,CAAC,EAAE,EAAE,EAAkB,EAAU,EAAE;IAC7D,OAAO,IAAA,4BAAY,EAAC,EAAE,CAAC,CAAC,IAAI,CAAC;AAC/B,CAAC,CAAC;AAFW,QAAA,YAAY,gBAEvB;AAEF,MAAM,EAAE,aAAa,EAAE,SAAS,EAAE,GAAG,IAAA,+BAAe,EAAC,iBAAS,EAAE,oBAAY,CAAC,CAAC;AAErE,sCAAa;AAAE,8BAAS","sourcesContent":["import { nodeDefinitions } from \"graphql-relay\";\nimport { fromGlobalId } from \"graphql-relay\";\nimport { GraphqlContextType } from \"../services/DataSources\";\nimport { Mission } from \"src/services/spaceX/types/Mission\";\n\nconst nodeTypes = [\"optionDescriptor\", \"financialImpact\", \"booking\"];\n\nexport const idFetcher = async (\n  id: string,\n  { dataSources }: GraphqlContextType\n): Promise<unknown> => {\n  return {\n    id,\n  };\n};\n\nexport const typeResolver = ({ id }: { id: string }): string => {\n  return fromGlobalId(id).type;\n};\n\nconst { nodeInterface, nodeField } = nodeDefinitions(idFetcher, typeResolver);\n\nexport { nodeInterface, nodeField };\n"]}