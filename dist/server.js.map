{"version":3,"file":"server.js","sourceRoot":"/","sources":["server.ts"],"names":[],"mappings":";;;;;AAAA,iEAAqD;AACrD,2DAAoF;AACpF,sDAA8B;AAC9B,4BAA0B;AAC1B,uCAAmC;AACnC,sDAA8B;AAC9B,gDAAwB;AACxB,wDAAqD;AAErD,MAAM,UAAU,GACd,OAAO,CAAC,GAAG,CAAC,WAAW;IACvB,uGAAuG,CAAC;AAE1G,MAAM,IAAI,GAAG,KAAK,IAAI,EAAE;IAEtB,MAAM,IAAA,kBAAO,EAAC,UAAU,CAAC;SACtB,IAAI,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;SACvC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;QACb,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACnB,CAAC,CAAC,CAAC;IAEL,MAAM,MAAM,GAAG,IAAI,oCAAY,CAAC;QAC9B,MAAM,EAAN,gBAAM;QACN,WAAW,EAAX,yBAAW;QACX,OAAO,EAAE,CAAC,mEAA8C,CAAC;KAC1D,CAAC,CAAC;IAEH,MAAM,GAAG,GAAG,IAAA,iBAAO,GAAE,CAAC;IAGtB,GAAG,CAAC,GAAG,CAAC,IAAA,cAAI,GAAE,CAAC,CAAC;IAEhB,MAAM,MAAM,CAAC,KAAK,EAAE,CAAC;IAGrB,MAAM,CAAC,eAAe,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;IAEhC,MAAM,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC;IAEtC,GAAG,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,EAAE,GAAG,EAAE,CACxB,OAAO,CAAC,GAAG,CAAC,6CAA6C,IAAI,EAAE,CAAC,CACjE,CAAC;AACJ,CAAC,CAAC;AAEF,IAAI,EAAE,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;IACrB,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;AAC9B,CAAC,CAAC,CAAC","sourcesContent":["import { ApolloServer } from \"apollo-server-express\";\nimport { ApolloServerPluginLandingPageGraphQLPlayground } from \"apollo-server-core\";\nimport express from \"express\";\nimport \"reflect-metadata\";\nimport { connect } from \"mongoose\";\nimport schema from \"./schema\";\nimport cors from \"cors\";\nimport { dataSources } from \"./services/DataSources\";\n\nconst mongoDbUrl =\n  process.env.MONGODB_URI ||\n  \"mongodb+srv://kovar95:Ml34SEGBEK4iGuZC@spacexcluster.67pvpam.mongodb.net/?retryWrites=true&w=majority\";\n\nconst main = async () => {\n  // create mongoose connection\n  await connect(mongoDbUrl)\n    .then(() => console.log(\"DB Connected\"))\n    .catch((err) => {\n      console.log(err);\n    });\n\n  const server = new ApolloServer({\n    schema,\n    dataSources,\n    plugins: [ApolloServerPluginLandingPageGraphQLPlayground],\n  });\n\n  const app = express();\n\n  // // allow cross-origin requests\n  app.use(cors());\n\n  await server.start();\n\n  // @ts-ignore\n  server.applyMiddleware({ app });\n\n  const port = process.env.PORT || 5000;\n\n  app.listen({ port }, () =>\n    console.log(`ðŸš€ Server ready and listening at PORT ==> ${port}`)\n  );\n};\n\nmain().catch((error) => {\n  console.log(error, \"error\");\n});\n"]}